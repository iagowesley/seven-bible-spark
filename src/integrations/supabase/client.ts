// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from '@/integrations/supabase/types';

const SUPABASE_URL = "https://ejfqxtjjrwudmrdijdpv.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVqZnF4dGpqcnd1ZG1yZGlqZHB2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYwNTg0MzEsImV4cCI6MjA2MTYzNDQzMX0.NB6yWKK6hYVqIn080ayJacPAovdLUQirxGTdlY1MroQ";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Add a wrapper for raw SQL execution - using any type to avoid type constraints
export const executeRawQuery = async (functionName: string, params?: Record<string, any>) => {
  try {
    // Use explicit any type casting to bypass TypeScript's type checking
    const { data, error } = await (supabase.rpc as any)(functionName, params);
    return { data, error };
  } catch (error) {
    console.error('Error executing raw query:', error);
    return { data: null, error };
  }
};
